<!--
Copyright 2009 KaChing Group Inc. Licensed under the Apache License,
Version 2.0 (the "License"); you may not use this file except in compliance
with the License. You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
or agreed to in writing, software distributed under the License is
distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
-->
<project name="kawala" default="test" xmlns:ivy="antlib:org.apache.ivy.ant">
  <description>kawala</description>

  <macrodef name="compile">
    <attribute name="srcdir" />
    <attribute name="destdir" />
    <element name="additional-classpath" optional="true" />
    <sequential>
      <javac srcdir="@{srcdir}" destdir="@{destdir}" 
          debug="true" debuglevel="lines,vars,source" target="1.6">
        <additional-classpath />
      </javac>
      <copy todir="@{destdir}">
        <fileset dir="@{srcdir}">
          <exclude name="**/*.java" />
          <exclude name="**/*.scala" />
        </fileset>
      </copy>
    </sequential>
  </macrodef>
  
  <target name="clean">
    <delete dir="target" />
    <delete dir="RPMS" />
  </target>

  <target name="init" depends="ivy-classpaths">
    <mkdir dir="target" />
    <mkdir dir="target/bin" />
    <mkdir dir="target/bin-testing" />
    <mkdir dir="target/bin-test" />
    <mkdir dir="target/reports" />
  </target>

  <!-- we're using google guice with JIT providers -->
  <path id="classpath-guice">
    <fileset file="lib/main/guice-snapshot-fca95d48b9536f5429c9.jar" />
  </path>

  <path id="classpath-javax-inject">
    <fileset file="lib/main/javax.inject.jar" />
  </path>

  <target name="compile" depends="init">
    <compile srcdir="src" destdir="target/bin">
      <additional-classpath>
        <classpath refid="classpath-kawala-common" />
        <classpath refid="classpath-kawala-converters" />
        <classpath refid="classpath-kawala-hibernate" />
        <classpath refid="classpath-guice" />
        <classpath refid="classpath-javax-inject" />
      </additional-classpath>
    </compile>
    <compile srcdir="srctesting/com/kaching/platform/testing"
        destdir="target/bin-testing">
      <additional-classpath>
        <classpath refid="classpath-kawala-testing" />
        <classpath refid="classpath-guice" />
        <classpath refid="classpath-javax-inject" />
        <classpath path="target/bin" />
      </additional-classpath>
    </compile>
    <compile srcdir="srctest" destdir="target/bin-test">
      <additional-classpath>
        <classpath refid="classpath-kawala" />
        <classpath refid="classpath-guice" />
        <classpath refid="classpath-javax-inject" />
        <classpath path="target/bin" />
        <classpath path="target/bin-testing" />
      </additional-classpath>
    </compile>
  </target>

  <target name="test" depends="compile">
    <junit printsummary="yes" haltonfailure="yes" fork="true"
        maxmemory="1024M" showoutput="no">
      <sysproperty
          key="kawala.bin_directories" file="target/bin:target/bin-testing" />
      <jvmarg value="-XX:MaxPermSize=256m"/>
      <jvmarg value="-Xms128m"/>
      <jvmarg value="-Xmx1700m"/>
      <classpath refid="classpath-kawala" />
      <classpath refid="classpath-guice" />
      <classpath refid="classpath-javax-inject" />
      <classpath path="target/bin" />
      <classpath path="target/bin-testing" />
      <classpath path="target/bin-test" />
      <formatter type="xml" usefile="true" />
      <test name="com.kaching.platform.AllTests"
          todir="target/reports" unless="testcase" />
    </junit>
  </target>
  
  <target name="smoke" description="Smoke Build" depends="clean,test" />

  <macrodef name="jar-sub-project">
    <attribute name="name" />
    <attribute name="base" />
    <sequential>
      <jar destfile="target/kawala-@{name}-${kawala-version}.jar">
        <fileset dir="@{base}">
          <include name="com/kaching/platform/@{name}/**/**.class" />
        </fileset>
      </jar>
    </sequential>
  </macrodef>

  <!-- TODO: real versioning -->
  <property name="kawala-version" value="0.1" />

  <target name="jar" description="builds jars" depends="smoke">
    <jar destfile="target/kawala-${kawala-version}.jar">
      <fileset dir="target/bin"/>
      <fileset dir="target/bin-testing"/>
    </jar>
    <jar-sub-project name="common" base="target/bin"/>
    <jar-sub-project name="converters" base="target/bin"/>
    <jar-sub-project name="guice" base="target/bin"/>
    <jar-sub-project name="hibernate" base="target/bin"/>
    <jar-sub-project name="testing" base="target/bin-testing"/>
  </target>

  <property name="ant-eclipse.dir" value="ant-eclipse"/>

  <condition property="ant-eclipse.jar.exists">
    <available file="${ant-eclipse.dir}/lib/ant-eclipse-1.0-jvm1.2.jar"/>
  </condition>

  <target name="ant-eclipse-download" unless="ant-eclipse.jar.exists">
    <mkdir dir="${ant-eclipse.dir}"/>
    <get src="http://downloads.sourceforge.net/project/ant-eclipse/ant-eclipse/1.0/ant-eclipse-1.0.bin.tar.bz2"
         dest="${ant-eclipse.dir}/ant-eclipse-1.0.bin.tar.bz2" usetimestamp="false" />
    <bunzip2 src="${ant-eclipse.dir}/ant-eclipse-1.0.bin.tar.bz2"/>
    <untar src="${ant-eclipse.dir}/ant-eclipse-1.0.bin.tar"
           dest="${ant-eclipse.dir}">
      <patternset>
        <include name="lib/ant-eclipse-1.0-jvm1.2.jar"/>
      </patternset>
    </untar>
    <delete file="${ant-eclipse.dir}/ant-eclipse-1.0.bin.tar" />
    <delete file="${ant-eclipse.dir}/ant-eclipse-1.0.bin.tar.bz2" />
  </target>

  <target name="eclipse"
          depends="ant-eclipse-download,init"
          description="Create eclipse project files">
    <taskdef name="eclipse"
             classname="prantl.ant.eclipse.EclipseTask"
             classpath="${ant-eclipse.dir}/lib/ant-eclipse-1.0-jvm1.2.jar" />
    <eclipse updatealways="true">
      <settings>
        <jdtcore compilercompliance="6.0" />
        <resources encoding="UTF-8" />
      </settings>
      <project name="${ant.project.name}" />
      <classpath>
        <source path="src"
                output="bin" />
        <source path="srctest"
                output="bin-test" />
        <source path="srctesting"
                output="bin-testing" />
        <library pathref="classpath-guice" exported="true" />
        <library pathref="classpath-javax-inject" exported="true" />
        <library pathref="classpath-kawala" exported="true" />
      </classpath>
    </eclipse>
  </target>
  
  <property name="ivy.install.version" value="2.1.0" />
  <condition property="ivy.home" value="${env.IVY_HOME}">
    <isset property="env.IVY_HOME" />
  </condition>
  <property name="ivy.home" value="${user.home}/.ivy" />
  <property name="ivy.jar.dir" value="${ivy.home}/lib" />
  <mkdir dir="${ivy.jar.dir}"/>
  <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
  <path id="ivy.lib.path">
    <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
  </path>

  <taskdef resource="org/apache/ivy/ant/antlib.xml"
           uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>

  <target name="ivy-download" unless="offline">
    <!-- download Ivy from web site so that it can be used even without any special installation -->
    <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" 
         dest="${ivy.jar.file}" usetimestamp="true"/>
  </target>

  <target name="ivy-init" depends="ivy-download">
      <!-- try to load ivy here from ivy home, in case the user has not already dropped
           it into ant's lib dir (note that the latter copy will always take precedence).
           We will not fail as long as local lib dir exists (it may be empty) and
           ivy is in at least one of ant's lib dir or the local lib dir. -->
  </target>
 
  <target name="ivy-clean" description="clean ivy dependencies">
    <ivy:cleancache />
  </target>
 
  <target name="ivy-classpaths">
    <ivy:resolve conf="kawala" type="jar"/>
    <ivy:cachepath pathid="classpath-kawala-common" conf="common" type="jar"/>
    <ivy:cachepath pathid="classpath-kawala-converters" conf="converters" type="jar"/>
    <ivy:cachepath pathid="classpath-kawala-hibernate" conf="hibernate" type="jar"/>
    <ivy:cachepath pathid="classpath-kawala-testing" conf="testing" type="jar"/>
    <ivy:cachepath pathid="classpath-kawala" conf="kawala" type="jar"/>
  </target>
 
</project>
